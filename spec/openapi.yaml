openapi: 3.1.0
info:
  title: MAIL Server API
  version: "1.0.0"
  description: REST API for the Multi-Agent Interface Layer (MAIL) server, including interswarm messaging.
servers:
  - url: http://localhost:8000
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    MAILAddress:
      $ref: './MAIL-core.schema.json#/$defs/MAILAddress'
    MAILRequest:
      $ref: './MAIL-core.schema.json#/$defs/MAILRequest'
    MAILResponse:
      $ref: './MAIL-core.schema.json#/$defs/MAILResponse'
    MAILBroadcast:
      $ref: './MAIL-core.schema.json#/$defs/MAILBroadcast'
    MAILInterrupt:
      $ref: './MAIL-core.schema.json#/$defs/MAILInterrupt'
    MAILMessage:
      $ref: './MAIL-core.schema.json#/$defs/MAILMessage'
    MAILInterswarmMessage:
      $ref: './MAIL-interswarm.schema.json'
paths:
  /:
    get:
      summary: Root health
      operationId: root
      responses:
        '200':
          description: Server info
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  name: { type: string }
                  status: { type: string }
                  version: { type: string }
  /status:
    get:
      summary: Server status
      operationId: status
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Status summary
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  swarm:
                    type: object
                    properties:
                      name: { type: string, nullable: true }
                      status: { type: string }
                  active_users: { type: integer }
                  user_mail_ready: { type: boolean }
                  user_task_running: { type: boolean }
  /chat:
    post:
      summary: Chat with the swarm (supervisor entrypoint)
      description: Requires role=user or role=admin.
      operationId: chat
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required: [message]
              properties:
                message: { type: string }
      responses:
        '200':
          description: Final response produced by supervisor after task completion
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  response: { type: string }
        '401':
          description: Unauthorized
  /health:
    get:
      summary: Health for interswarm checks
      operationId: health
      responses:
        '200':
          description: Health info
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  status: { type: string }
                  swarm_name: { type: string }
                  timestamp: { type: string, format: date-time }
  /swarms:
    get:
      summary: List known swarms
      operationId: listSwarms
      responses:
        '200':
          description: Known swarms
          content:
            application/json:
              schema:
                type: object
                properties:
                  swarms:
                    type: array
                    items:
                      type: object
                      additionalProperties: false
                      properties:
                        name: { type: string }
                        base_url: { type: string }
                        is_active: { type: boolean }
                        last_seen: { type: string, format: date-time, nullable: true }
                        metadata: { type: object, nullable: true }
  /swarms/register:
    post:
      summary: Register a swarm
      description: Requires role=admin.
      operationId: registerSwarm
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required: [name, base_url]
              properties:
                name: { type: string }
                base_url: { type: string }
                auth_token: { type: string, nullable: true }
                volatile: { type: boolean, default: true }
                metadata: { type: object, nullable: true }
      responses:
        '200':
          description: Registration result
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  swarm_name: { type: string }
        '401':
          description: Unauthorized
  /interswarm/message:
    post:
      summary: Receive interswarm message
      description: Requires role=agent.
      operationId: receiveInterswarmMessage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MAILInterswarmMessage'
      responses:
        '200':
          description: Response message (MAILMessage) to send back to source swarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MAILMessage'
        '401':
          description: Unauthorized
  /interswarm/response:
    post:
      summary: Receive interswarm response
      description: Requires role=agent.
      operationId: receiveInterswarmResponse
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MAILMessage'
      responses:
        '200':
          description: Response processing status
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required: [status, task_id]
                properties:
                  status:
                    type: string
                    enum: ["response_processed", "no_mail_instance"]
                  task_id: { type: string }
        '401':
          description: Unauthorized
  /interswarm/send:
    post:
      summary: Send an interswarm message
      description: Requires role=user or role=admin.
      operationId: sendInterswarmMessage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required: [target_agent, message, user_token]
              properties:
                target_agent: { type: string, description: "Use agent@swarm format" }
                message: { type: string }
                user_token: { type: string, description: "User instance key" }
      responses:
        '200':
          description: Routed MAIL message result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MAILMessage'
        '400':
          description: Bad request
        '401':
          description: Unauthorized

